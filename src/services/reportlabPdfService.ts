import type { InspectionReport } from '../types/report';

/**
 * Service for generating PDFs using the ReportLab backend service
 */
export class ReportLabPdfService {
  private static readonly API_URL = 'http://localhost:8000';

  /**
   * Generates a PDF using the ReportLab backend service
   * @param data The inspection report data
   * @returns A Promise that resolves to a Blob containing the PDF
   */
  static async generatePDF(data: InspectionReport): Promise<Blob> {
    try {
      const response = await fetch(`${this.API_URL}/generate-pdf`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to generate PDF: ${response.status} ${errorText}`);
      }

      return await response.blob();
    } catch (error) {
      console.error('Error generating PDF with ReportLab:', error);
      throw new Error('Failed to generate PDF with ReportLab. Please try again.');
    }
  }

  /**
   * Downloads a PDF generated by the ReportLab backend service
   * @param blob The PDF blob
   * @param filename The filename for the downloaded PDF
   */
  static async downloadPDF(blob: Blob, filename: string): Promise<void> {
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }

  /**
   * Generates and downloads a PDF using the ReportLab backend service
   * @param data The inspection report data
   * @param filename The filename for the downloaded PDF
   */
  static async generateAndDownloadPDF(data: InspectionReport, filename: string): Promise<void> {
    const blob = await this.generatePDF(data);
    await this.downloadPDF(blob, filename);
  }
}
